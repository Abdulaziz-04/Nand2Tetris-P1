// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    //first the last bit will decide the type of instruction

    Mux16(a=instruction,b=aluOut,sel=instruction[15],out=AOut);

    // Now the load bit of A register is decided 
    // by drawing the K-Map we get a'+b
    // OR we can not the instuction 15 bit
    // and Mux16 the alu and the given instrucion
 //Mux16(a=aluOut,b[15]=false,b[0..14]=instruction[0..14],sel=not15,out=x)

    Not(in=instruction[15],out=ni);
    Or(a=ni,b=instruction[5],out=ALoad);
    ARegister(in=AOut,load=ALoad,out=AReg,out[0..14]=addressM);

    // now the a bit in instruction decides if the 
    // manipulation involves the M[A] or a standard calculation

    Mux16(a=AReg,b=inM,sel=instruction[12],out=alu2);

    //Now to store in D register the destination bit for D
    // i.e. instruction[4] will decide load value 
    // provided given instruction must be C-instruction

    And(a=instruction[15],b=instruction[4],out=DLoad);
    DRegister(in=aluOut,load=DLoad,out=alu1);

    //Now taking both inputs in ALU

    ALU(x=alu1,y=alu2,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=aluOut,out=outM,zr=zero,ng=neg);

    //now instruction bit 3 decides writeM condition

    And(a=instruction[15],b=instruction[3],out=writeM);

    // Manipulating the jump bits to get the precise load value
    // the jump bits from instruction bit and from ALU 
    // must be compared and then result must be generated
    // first we will generate the pos bit

    Or(a=zero,b=neg,out=zrneg); //zero or negative
    Not(in=zrneg,out=pos);  //not (zero or negative ) i.e. positive

    // Now comparing them with jump bits
    // 0(>) 1(=) 2(<)

    And(a=instruction[0],b=pos,out=jgt);
    And(a=instruction[1],b=zero,out=jeq);
    And(a=instruction[2],b=neg,out=jlt);

    // Reduce the jump logic to single bit 

    Or(a=jgt,b=jeq,out=tmp);
    Or(a=tmp,b=jlt,out=tmpj);

    // Checking for instruction to be C-instruction

    And(a=instruction[15],b=tmpj,out=jump);
    PC(in=AReg,load=jump,inc=true,reset=reset,out[0..14]=pc,out[15]=x);

}
